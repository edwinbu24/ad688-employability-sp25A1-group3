---
title: "Data Analysis"
subtitle: "Comprehensive Data Cleaning & Exploratory Analysis of Job Market Trends"
author:
  - name: Edwin Leck
    affiliations:
      - id: bu
        name: Boston University
        city: Boston
        state: MA
bibliography: references.bib
csl: csl/econometrica.csl
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
---

```{python}
#| echo: true
#| warning: false
#| message: false

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import missingno as msno

# Load the dataset 
df = pd.read_csv('data/lightcast_job_postings.csv')

# Dropping unnecessary columns
columns_to_drop = [
    "ID", "URL", "ACTIVE_URLS", "DUPLICATES", "LAST_UPDATED_TIMESTAMP",
    "NAICS2", "NAICS3", "NAICS4", "NAICS5", "NAICS6",
    "SOC_2", "SOC_3", "SOC_5"
]
df.drop(columns=columns_to_drop, inplace=True)

# Visualize missing data
msno.heatmap(df)
plt.title("Missing Values Heatmap")
plt.savefig("./figures/missing_values_heatmap.png", dpi=300)  # Save the figure
plt.show()
```
![Missing Values Heatmap](./figures/missing_values_heatmap.png){width="90%" fig-align="center"}

```{python}
# Handle missing values for "SALARY"
if "SALARY" in df.columns:
    df["SALARY"].fillna(df["SALARY"].median(), inplace=True)
else:
    print("Error: 'SALARY_TO' column not found in the dataset.")

# Handle missing values for "INDUSTRY"
if "NAICS_2022_6_NAME" in df.columns:
    df["NAICS_2022_6_NAME"].fillna("Unknown", inplace=True)
else:
    print("Error: 'NAICS_2022_6_NAME' column not found in the dataset.")

# Display the number of missing values after handling
df.isnull().sum()

df = df.drop_duplicates(subset=["TITLE", "COMPANY", "LOCATION", "POSTED"], keep="first")

# Display the number of rows after removing duplicates
df.head()
```

```{python}
# Job postings by industry
industry_counts = df["NAICS_2022_6_NAME"].value_counts().reset_index()
industry_counts.columns = ["Industry", "Count"]

# Exclude industries with 0 counts
industry_counts = industry_counts[industry_counts["Count"] > 0]

# Create the bar chart
fig = px.bar(industry_counts, x="Industry", y="Count", title="Job Postings by Industry")

fig.write_html("./figures/job_postings_by_industry.html")

fig.show()
```
<iframe src="./figures/job_postings_by_industry.html" width="100%" height="500px"></iframe>

```{python}
fig = px.box(df, x="NAICS_2022_6_NAME", y="SALARY", title="Salary Distribution by Industry")

fig.write_html("./figures/salary_distribution_by_industry.html")  # Save the figure

fig.show()

```
<iframe src="./figures/salary_distribution_by_industry.html" width="100%" height="500px"></iframe>

```{python}
# Remote vs. on-site jobs
remote_counts = df["REMOTE_TYPE_NAME"].value_counts().reset_index()
remote_counts.columns = ["Remote Type", "Count"]

# Save the figure as HTML (Plotly)
fig = px.pie(remote_counts, names="Remote Type", values="Count", title="Remote vs. On-Site Jobs")
fig.write_html("./figures/remote_vs_onsite_jobs.html")

# Display the figure
fig.show()
```
<iframe src="./figures/remote_vs_onsite_jobs.html" width="100%" height="500px"></iframe>